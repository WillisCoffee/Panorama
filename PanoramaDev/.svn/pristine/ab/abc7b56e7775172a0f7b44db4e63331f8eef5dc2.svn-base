/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pckEntites;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 *
 * @author clocal
 */
@Entity
@Table(name = "Evaluation")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Evaluation.findAll", query = "SELECT e FROM Evaluation e"),
    @NamedQuery(name = "Evaluation.findByIdEvaluationPK", query = "SELECT e FROM Evaluation e WHERE e.idEvaluationPK = :idEvaluationPK"),
    @NamedQuery(name = "Evaluation.findByNom", query = "SELECT e FROM Evaluation e WHERE e.nom = :nom"),
    @NamedQuery(name = "Evaluation.findByDescription", query = "SELECT e FROM Evaluation e WHERE e.description = :description"),
    @NamedQuery(name = "Evaluation.findByDateRemise", query = "SELECT e FROM Evaluation e WHERE e.dateRemise = :dateRemise"),
    @NamedQuery(name = "Evaluation.findByDateDebutEval", query = "SELECT e FROM Evaluation e WHERE e.dateDebutEval = :dateDebutEval"),
    @NamedQuery(name = "Evaluation.findByDateFinEval", query = "SELECT e FROM Evaluation e WHERE e.dateFinEval = :dateFinEval"),
    @NamedQuery(name = "Evaluation.findByEnonce", query = "SELECT e FROM Evaluation e WHERE e.enonce = :enonce"),
    @NamedQuery(name = "Evaluation.findByFichier", query = "SELECT e FROM Evaluation e WHERE e.fichier = :fichier"),
    @NamedQuery(name = "Evaluation.findByCategorieEval", query = "SELECT e FROM Evaluation e WHERE e.categorieEval = :categorieEval"),
    @NamedQuery(name = "Evaluation.findByStatut", query = "SELECT e FROM Evaluation e WHERE e.statut = :statut"),
    @NamedQuery(name = "Evaluation.findByCorrection", query = "SELECT e FROM Evaluation e WHERE e.correction = :correction"),
    @NamedQuery(name = "Evaluation.findByMethodeRemise", query = "SELECT e FROM Evaluation e WHERE e.methodeRemise = :methodeRemise"),
    @NamedQuery(name = "Evaluation.findByMoyenne", query = "SELECT e FROM Evaluation e WHERE e.moyenne = :moyenne"),
    @NamedQuery(name = "Evaluation.findByNombrePoints", query = "SELECT e FROM Evaluation e WHERE e.nombrePoints = :nombrePoints"),
    @NamedQuery(name = "Evaluation.findByEvaluer", query = "SELECT e FROM Evaluation e WHERE e.evaluer = :evaluer"),
    @NamedQuery(name = "Evaluation.findByPoidsNote", query = "SELECT e FROM Evaluation e WHERE e.poidsNote = :poidsNote"),
    @NamedQuery(name = "Evaluation.findByCommentaire", query = "SELECT e FROM Evaluation e WHERE e.commentaire = :commentaire")})
public class Evaluation implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "idEvaluation_PK")
    private Integer idEvaluationPK;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 45)
    @Column(name = "nom")
    private String nom;
    @Size(max = 255)
    @Column(name = "description")
    private String description;
    @Basic(optional = false)
    @NotNull
    @Column(name = "dateRemise")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateRemise;
    @Basic(optional = false)
    @NotNull
    @Column(name = "dateDebutEval")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateDebutEval;
    @Basic(optional = false)
    @NotNull
    @Column(name = "dateFinEval")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateFinEval;
    @Size(max = 255)
    @Column(name = "enonce")
    private String enonce;
    @Size(max = 255)
    @Column(name = "fichier")
    private String fichier;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 45)
    @Column(name = "categorieEval")
    private String categorieEval;
    @Size(max = 45)
    @Column(name = "statut")
    private String statut;
    @Size(max = 255)
    @Column(name = "correction")
    private String correction;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 45)
    @Column(name = "methodeRemise")
    private String methodeRemise;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Column(name = "moyenne")
    private BigDecimal moyenne;
    @Column(name = "nombrePoints")
    private BigDecimal nombrePoints;
    @Basic(optional = false)
    @NotNull
    @Column(name = "evaluer")
    private boolean evaluer;
    @Column(name = "poidsNote")
    private Integer poidsNote;
    @Size(max = 255)
    @Column(name = "commentaire")
    private String commentaire;
    @JoinColumn(name = "idGroupe_FK", referencedColumnName = "idGroupe_PK")
    @ManyToOne(optional = false)
    private Groupe idGroupeFK;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "idEvaluationFK")
    private List<Note> noteList;

    public Evaluation() {
    }

    public Evaluation(Integer idEvaluationPK) {
        this.idEvaluationPK = idEvaluationPK;
    }

    public Evaluation(Integer idEvaluationPK, String nom, Date dateRemise, Date dateDebutEval, Date dateFinEval, String categorieEval, String methodeRemise, boolean evaluer) {
        this.idEvaluationPK = idEvaluationPK;
        this.nom = nom;
        this.dateRemise = dateRemise;
        this.dateDebutEval = dateDebutEval;
        this.dateFinEval = dateFinEval;
        this.categorieEval = categorieEval;
        this.methodeRemise = methodeRemise;
        this.evaluer = evaluer;
    }

    public Integer getIdEvaluationPK() {
        return idEvaluationPK;
    }

    public void setIdEvaluationPK(Integer idEvaluationPK) {
        this.idEvaluationPK = idEvaluationPK;
    }

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Date getDateRemise() {
        return dateRemise;
    }

    public void setDateRemise(Date dateRemise) {
        this.dateRemise = dateRemise;
    }

    public Date getDateDebutEval() {
        return dateDebutEval;
    }

    public void setDateDebutEval(Date dateDebutEval) {
        this.dateDebutEval = dateDebutEval;
    }

    public Date getDateFinEval() {
        return dateFinEval;
    }

    public void setDateFinEval(Date dateFinEval) {
        this.dateFinEval = dateFinEval;
    }

    public String getEnonce() {
        return enonce;
    }

    public void setEnonce(String enonce) {
        this.enonce = enonce;
    }

    public String getFichier() {
        return fichier;
    }

    public void setFichier(String fichier) {
        this.fichier = fichier;
    }

    public String getCategorieEval() {
        return categorieEval;
    }

    public void setCategorieEval(String categorieEval) {
        this.categorieEval = categorieEval;
    }

    public String getStatut() {
        return statut;
    }

    public void setStatut(String statut) {
        this.statut = statut;
    }

    public String getCorrection() {
        return correction;
    }

    public void setCorrection(String correction) {
        this.correction = correction;
    }

    public String getMethodeRemise() {
        return methodeRemise;
    }

    public void setMethodeRemise(String methodeRemise) {
        this.methodeRemise = methodeRemise;
    }

    public BigDecimal getMoyenne() {
        return moyenne;
    }

    public void setMoyenne(BigDecimal moyenne) {
        this.moyenne = moyenne;
    }

    public BigDecimal getNombrePoints() {
        return nombrePoints;
    }

    public void setNombrePoints(BigDecimal nombrePoints) {
        this.nombrePoints = nombrePoints;
    }

    public boolean getEvaluer() {
        return evaluer;
    }

    public void setEvaluer(boolean evaluer) {
        this.evaluer = evaluer;
    }

    public Integer getPoidsNote() {
        return poidsNote;
    }

    public void setPoidsNote(Integer poidsNote) {
        this.poidsNote = poidsNote;
    }

    public String getCommentaire() {
        return commentaire;
    }

    public void setCommentaire(String commentaire) {
        this.commentaire = commentaire;
    }

    public Groupe getIdGroupeFK() {
        return idGroupeFK;
    }

    public void setIdGroupeFK(Groupe idGroupeFK) {
        this.idGroupeFK = idGroupeFK;
    }

    @XmlTransient
    public List<Note> getNoteList() {
        return noteList;
    }

    public void setNoteList(List<Note> noteList) {
        this.noteList = noteList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (idEvaluationPK != null ? idEvaluationPK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Evaluation)) {
            return false;
        }
        Evaluation other = (Evaluation) object;
        if ((this.idEvaluationPK == null && other.idEvaluationPK != null) || (this.idEvaluationPK != null && !this.idEvaluationPK.equals(other.idEvaluationPK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "pckEntites.Evaluation[ idEvaluationPK=" + idEvaluationPK + " ]";
    }
    
}
